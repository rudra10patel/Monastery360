{
  "version": 3,
  "sources": ["../../../src/pages/AudioGuides.tsx"],
  "sourcesContent": ["import { useState, useRef, useEffect } from \"react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Card } from \"@/components/ui/card\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Play, Pause, Download, Volume2, MapPin, Clock, Smartphone, Loader2, Search, VolumeX, Volume1 } from \"lucide-react\";\r\nimport { Navigation } from \"@/components/Navigation\";\r\nimport { monasteries } from \"@/data/monasteries\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\n\r\n// Import audio files\r\nimport rumtekAudio from \"@/assets/audio/Rumtek monastery.mp3\";\r\nimport encheyAudio from \"@/assets/audio/Enchey Monastery.mp3\";\r\nimport tashidingAudio from \"@/assets/audio/Tashiding Monastery.mp3\";\r\nimport pemayangtseAudio from \"@/assets/audio/Pemayangtse Monastery.mp3\";\r\nimport dubdiAudio from \"@/assets/audio/Dubdi Monastery.mp3\";\r\nimport kartokAudio from \"@/assets/audio/Kartok Monastery.mp3\";\r\nimport lingdumAudio from \"@/assets/audio/Lingdum (Ranka) Monastery.mp3\";\r\nimport phodongAudio from \"@/assets/audio/Phodong Monastery.mp3\";\r\nimport ralangAudio from \"@/assets/audio/Ralang Monastery.mp3\";\r\nimport doDrulAudio from \"@/assets/audio/Do-Drul Chorten Stupa.mp3\";\r\n\r\ninterface AudioGuide {\r\n  id: string;\r\n  title: string;\r\n  monastery: string;\r\n  duration: string;\r\n  language: string;\r\n  narrator: string;\r\n  description: string;\r\n  type: \"tour\" | \"history\" | \"meditation\" | \"ceremony\";\r\n  offline: boolean;\r\n  premium: boolean;\r\n  audioFile: string;\r\n}\r\n\r\nconst audioGuides: AudioGuide[] = [\r\n  {\r\n    id: \"1\",\r\n    title: \"Rumtek Monastery\",\r\n    monastery: \"Rumtek Monastery\",\r\n    duration: \"45 min\",\r\n    language: \"English\",\r\n    narrator: \"Dr. Tenzin Norbu\",\r\n    description: \"Explore the seat of the Karmapa lineage, featuring stunning Tibetan architecture, ancient murals, and the Golden Stupa containing relics of the 16th Karmapa.\",\r\n    type: \"tour\",\r\n    offline: true,\r\n    premium: false,\r\n    audioFile: rumtekAudio\r\n  },\r\n  {\r\n    id: \"2\",\r\n    title: \"Enchey Monastery\",\r\n    monastery: \"Enchey Monastery\",\r\n    duration: \"25 min\",\r\n    language: \"English\",\r\n    narrator: \"Lama Pemba\",\r\n    description: \"Discover this 200-year-old monastery known for its unique Nyingma tradition, featuring beautiful prayer halls and panoramic views of Gangtok.\",\r\n    type: \"tour\",\r\n    offline: true,\r\n    premium: false,\r\n    audioFile: encheyAudio\r\n  },\r\n  {\r\n    id: \"3\",\r\n    title: \"Tashiding Monastery\",\r\n    monastery: \"Tashiding Monastery\",\r\n    duration: \"35 min\",\r\n    language: \"English\",\r\n    narrator: \"Prof. Sangay Dolma\",\r\n    description: \"Visit this sacred monastery perched on a hilltop, famous for its annual Bumchu festival and ancient Buddhist scriptures dating back centuries.\",\r\n    type: \"tour\",\r\n    offline: false,\r\n    premium: false,\r\n    audioFile: tashidingAudio\r\n  },\r\n  {\r\n    id: \"4\",\r\n    title: \"Pemayangtse Monastery\",\r\n    monastery: \"Pemayangtse Monastery\",\r\n    duration: \"60 min\",\r\n    language: \"English\",\r\n    narrator: \"Monastery Monks\",\r\n    description: \"Experience the oldest monastery in Sikkim, featuring intricate wood carvings, ancient thangkas, and the famous Padmasambhava statue.\",\r\n    type: \"tour\",\r\n    offline: true,\r\n    premium: false,\r\n    audioFile: pemayangtseAudio\r\n  },\r\n  {\r\n    id: \"5\",\r\n    title: \"Dubdi Monastery\",\r\n    monastery: \"Dubdi Monastery\",\r\n    duration: \"40 min\",\r\n    language: \"English\",\r\n    narrator: \"Elder Karma Lama\",\r\n    description: \"Journey to the oldest monastery in Sikkim, built in 1701, featuring traditional Tibetan architecture and stunning mountain views.\",\r\n    type: \"tour\",\r\n    offline: true,\r\n    premium: false,\r\n    audioFile: dubdiAudio\r\n  },\r\n  {\r\n    id: \"6\",\r\n    title: \"Kartok Monastery\",\r\n    monastery: \"Kartok Monastery\",\r\n    duration: \"30 min\",\r\n    language: \"English\",\r\n    narrator: \"Lama Dorje\",\r\n    description: \"Explore this peaceful monastery known for its meditation retreats and beautiful garden setting, perfect for spiritual contemplation.\",\r\n    type: \"tour\",\r\n    offline: true,\r\n    premium: false,\r\n    audioFile: kartokAudio\r\n  },\r\n  {\r\n    id: \"7\",\r\n    title: \"Lingdum (Ranka) Monastery\",\r\n    monastery: \"Lingdum (Ranka) Monastery\",\r\n    duration: \"35 min\",\r\n    language: \"English\",\r\n    narrator: \"Rinpoche Tenzin\",\r\n    description: \"Discover this modern monastery complex featuring traditional architecture, a large prayer hall, and educational facilities for Buddhist studies.\",\r\n    type: \"tour\",\r\n    offline: true,\r\n    premium: false,\r\n    audioFile: lingdumAudio\r\n  },\r\n  {\r\n    id: \"8\",\r\n    title: \"Phodong Monastery\",\r\n    monastery: \"Phodong Monastery\",\r\n    duration: \"28 min\",\r\n    language: \"English\",\r\n    narrator: \"Lama Karma\",\r\n    description: \"Visit this historic monastery known for its beautiful murals, ancient manuscripts, and the annual Chaam dance festival.\",\r\n    type: \"tour\",\r\n    offline: true,\r\n    premium: false,\r\n    audioFile: phodongAudio\r\n  },\r\n  {\r\n    id: \"9\",\r\n    title: \"Ralang Monastery\",\r\n    monastery: \"Ralang Monastery\",\r\n    duration: \"32 min\",\r\n    language: \"English\",\r\n    narrator: \"Lama Sangye\",\r\n    description: \"Explore this magnificent monastery featuring stunning architecture, intricate artwork, and a peaceful atmosphere for meditation and prayer.\",\r\n    type: \"tour\",\r\n    offline: true,\r\n    premium: false,\r\n    audioFile: ralangAudio\r\n  },\r\n  {\r\n    id: \"10\",\r\n    title: \"Do-Drul Chorten Stupa\",\r\n    monastery: \"Do-Drul Chorten Stupa\",\r\n    duration: \"20 min\",\r\n    language: \"English\",\r\n    narrator: \"Lama Tashi\",\r\n    description: \"Discover this sacred stupa built by the revered Buddhist master Dudjom Rinpoche, featuring beautiful architecture and spiritual significance.\",\r\n    type: \"tour\",\r\n    offline: true,\r\n    premium: false,\r\n    audioFile: doDrulAudio\r\n  }\r\n];\r\n\r\nexport const AudioGuides = () => {\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const [playingId, setPlayingId] = useState<string | null>(null);\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n  const [duration, setDuration] = useState(0);\r\n  const [audioDurations, setAudioDurations] = useState<Record<string, number>>({});\r\n  const [downloadingId, setDownloadingId] = useState<string | null>(null);\r\n  const [pausedId, setPausedId] = useState<string | null>(null);\r\n  const [volume, setVolume] = useState(1);\r\n  const [isMuted, setIsMuted] = useState(false);\r\n  const audioRef = useRef<HTMLAudioElement | null>(null);\r\n  const [searchParams] = useSearchParams();\r\n  const monasteryParam = searchParams.get('monastery');\r\n\r\n  // Set search query from URL parameter on component mount\r\n  useEffect(() => {\r\n    if (monasteryParam) {\r\n      setSearchQuery(monasteryParam);\r\n    }\r\n  }, [monasteryParam]);\r\n\r\n  const filteredGuides = audioGuides.filter(guide => {\r\n    const matchesSearch = searchQuery === \"\" || \r\n      guide.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n      guide.monastery.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n      guide.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n      guide.narrator.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n      guide.language.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n      guide.type.toLowerCase().includes(searchQuery.toLowerCase());\r\n    return matchesSearch;\r\n  });\r\n\r\n  const getTypeColor = (type: string) => {\r\n    switch (type) {\r\n      case \"tour\": return \"bg-monastery-gold/20 text-monastery-maroon dark:bg-sunrise/20 dark:text-sunrise\";\r\n      case \"history\": return \"bg-mountain-blue/20 text-mountain-blue\";\r\n      case \"meditation\": return \"bg-primary/20 text-primary\";\r\n      case \"ceremony\": return \"bg-accent/20 text-accent\";\r\n      default: return \"bg-muted text-muted-foreground\";\r\n    }\r\n  };\r\n\r\n  const capitalizeFirst = (str: string) => {\r\n    return str.charAt(0).toUpperCase() + str.slice(1);\r\n  };\r\n\r\n\r\n  // Audio player functions\r\n  const handlePlayPause = (guideId: string, audioFile: string) => {\r\n    if (playingId === guideId) {\r\n      // Pause current audio\r\n      if (audioRef.current) {\r\n        audioRef.current.pause();\r\n      }\r\n      setPlayingId(null);\r\n      setPausedId(guideId);\r\n    } else if (pausedId === guideId) {\r\n      // Resume paused audio\r\n      if (audioRef.current) {\r\n        audioRef.current.play().catch(error => {\r\n          console.error('Error resuming audio:', error);\r\n          setPlayingId(null);\r\n          setPausedId(null);\r\n        });\r\n        setPlayingId(guideId);\r\n        setPausedId(null);\r\n      }\r\n    } else {\r\n      // Stop any currently playing audio\r\n      if (audioRef.current) {\r\n        audioRef.current.pause();\r\n        audioRef.current.currentTime = 0;\r\n      }\r\n      \r\n      // Load new audio\r\n      const audio = new Audio(audioFile);\r\n      audioRef.current = audio;\r\n      \r\n      audio.addEventListener('loadedmetadata', () => {\r\n        setDuration(audio.duration);\r\n      });\r\n      \r\n      audio.addEventListener('timeupdate', () => {\r\n        setCurrentTime(audio.currentTime);\r\n      });\r\n      \r\n      audio.addEventListener('ended', () => {\r\n        setPlayingId(null);\r\n        setPausedId(null);\r\n        setCurrentTime(0);\r\n      });\r\n      \r\n      audio.addEventListener('error', (e) => {\r\n        console.error('Audio playback error:', e);\r\n        setPlayingId(null);\r\n        setPausedId(null);\r\n      });\r\n      \r\n      audio.play().catch(error => {\r\n        console.error('Error playing audio:', error);\r\n        setPlayingId(null);\r\n        setPausedId(null);\r\n      });\r\n      setPlayingId(guideId);\r\n      setPausedId(null);\r\n    }\r\n  };\r\n\r\n  const formatTime = (time: number) => {\r\n    const minutes = Math.floor(time / 60);\r\n    const seconds = Math.floor(time % 60);\r\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\r\n  };\r\n\r\n  const progressPercentage = duration > 0 ? (currentTime / duration) * 100 : 0;\r\n\r\n  // Load audio durations when component mounts\r\n  useEffect(() => {\r\n    const loadAudioDurations = async () => {\r\n      const durations: Record<string, number> = {};\r\n      \r\n      // Load durations in parallel for better performance\r\n      const loadPromises = audioGuides.map(async (guide) => {\r\n        try {\r\n          const audio = new Audio(guide.audioFile);\r\n          \r\n          return new Promise<{id: string, duration: number}>((resolve) => {\r\n            const timeout = setTimeout(() => {\r\n              console.warn(`Timeout loading duration for ${guide.title}, using fallback`);\r\n              resolve({ id: guide.id, duration: parseDuration(guide.duration) });\r\n            }, 5000);\r\n            \r\n            audio.addEventListener('loadedmetadata', () => {\r\n              clearTimeout(timeout);\r\n              resolve({ id: guide.id, duration: audio.duration });\r\n            });\r\n            \r\n            audio.addEventListener('error', (e) => {\r\n              clearTimeout(timeout);\r\n              console.warn(`Error loading duration for ${guide.title}:`, e);\r\n              resolve({ id: guide.id, duration: parseDuration(guide.duration) });\r\n            });\r\n            \r\n            // Load the audio to trigger metadata loading\r\n            audio.load();\r\n          });\r\n        } catch (error) {\r\n          console.warn(`Could not load duration for ${guide.title}:`, error);\r\n          return { id: guide.id, duration: parseDuration(guide.duration) };\r\n        }\r\n      });\r\n      \r\n      try {\r\n        const results = await Promise.all(loadPromises);\r\n        results.forEach(({ id, duration }) => {\r\n          durations[id] = duration;\r\n        });\r\n        setAudioDurations(durations);\r\n      } catch (error) {\r\n        console.error('Error loading audio durations:', error);\r\n      }\r\n    };\r\n\r\n    loadAudioDurations();\r\n  }, []);\r\n\r\n  // Helper function to parse duration string to seconds\r\n  const parseDuration = (durationStr: string): number => {\r\n    const match = durationStr.match(/(\\d+)\\s*min/);\r\n    return match ? parseInt(match[1]) * 60 : 0;\r\n  };\r\n\r\n  // Helper function to format seconds to duration string\r\n  const formatDuration = (seconds: number): string => {\r\n    const minutes = Math.floor(seconds / 60);\r\n    const remainingSeconds = Math.floor(seconds % 60);\r\n    if (minutes > 0) {\r\n      return remainingSeconds > 0 ? `${minutes}m ${remainingSeconds}s` : `${minutes} min`;\r\n    }\r\n    return `${remainingSeconds} sec`;\r\n  };\r\n\r\n  // Download audio file function\r\n  const handleDownload = async (guide: AudioGuide) => {\r\n    setDownloadingId(guide.id);\r\n    \r\n    try {\r\n      // Fetch the audio file\r\n      const response = await fetch(guide.audioFile);\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch audio file');\r\n      }\r\n      \r\n      // Convert to blob\r\n      const blob = await response.blob();\r\n      \r\n      // Create download URL\r\n      const url = window.URL.createObjectURL(blob);\r\n      \r\n      // Create a temporary anchor element to trigger download\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      \r\n      // Create a clean filename\r\n      const fileName = `${guide.monastery.replace(/[^a-zA-Z0-9]/g, '_')}_${guide.title.replace(/[^a-zA-Z0-9]/g, '_')}.mp3`;\r\n      link.download = fileName;\r\n      \r\n      // Append to body, click, and remove\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      \r\n      // Clean up the URL object\r\n      window.URL.revokeObjectURL(url);\r\n      \r\n    } catch (error) {\r\n      console.error('Error downloading audio file:', error);\r\n      // Fallback: try direct download\r\n      try {\r\n        const link = document.createElement('a');\r\n        link.href = guide.audioFile;\r\n        link.download = `${guide.monastery.replace(/[^a-zA-Z0-9]/g, '_')}_${guide.title.replace(/[^a-zA-Z0-9]/g, '_')}.mp3`;\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n      } catch (fallbackError) {\r\n        console.error('Fallback download failed:', fallbackError);\r\n        // Final fallback: open in new tab\r\n        window.open(guide.audioFile, '_blank');\r\n      }\r\n    } finally {\r\n      setDownloadingId(null);\r\n    }\r\n  };\r\n\r\n  // Volume control functions\r\n  const handleVolumeChange = (newVolume: number) => {\r\n    setVolume(newVolume);\r\n    if (audioRef.current) {\r\n      audioRef.current.volume = newVolume;\r\n    }\r\n  };\r\n\r\n  const handleMuteToggle = () => {\r\n    if (audioRef.current) {\r\n      if (isMuted) {\r\n        audioRef.current.volume = volume;\r\n        setIsMuted(false);\r\n      } else {\r\n        audioRef.current.volume = 0;\r\n        setIsMuted(true);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Keyboard shortcuts\r\n  useEffect(() => {\r\n    const handleKeyPress = (e: KeyboardEvent) => {\r\n      if (e.code === 'Space' && (playingId || pausedId)) {\r\n        e.preventDefault();\r\n        const currentGuide = audioGuides.find(g => g.id === (playingId || pausedId));\r\n        if (currentGuide) {\r\n          handlePlayPause(currentGuide.id, currentGuide.audioFile);\r\n        }\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyPress);\r\n    return () => window.removeEventListener('keydown', handleKeyPress);\r\n  }, [playingId, pausedId]);\r\n\r\n  // Cleanup audio on component unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (audioRef.current) {\r\n        audioRef.current.pause();\r\n        audioRef.current = null;\r\n      }\r\n      setPlayingId(null);\r\n      setPausedId(null);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-background\">\r\n      <Navigation />\r\n      \r\n      {/* Hero Section */}\r\n      <section className=\"pt-24 pb-8 bg-gradient-to-br from-monastery-gold/10 to-background dark:from-monastery-gold/20 dark:to-background\">\r\n        <div className=\"max-w-7xl mx-auto px-6\">\r\n          <div className=\"text-center mb-8\">\r\n            <h1 className=\"text-4xl md:text-5xl font-bold mb-6 text-foreground\">\r\n              <span className=\"bg-gradient-monastery bg-clip-text text-transparent\">Smart Audio Guides</span>\r\n            </h1>\r\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\r\n              Experience immersive audio guided tour covering architecture, history, and spiritual significance. \r\n              Available in multiple languages with offline mode for remote monastery visits.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 py-8\">\r\n        {/* Search Bar */}\r\n        <div className=\"mb-8\">\r\n          <div className=\"relative\">\r\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\r\n            <Input\r\n              type=\"text\"\r\n              placeholder=\"Search audio guides by monastery, narrator, language, or type...\"\r\n              value={searchQuery}\r\n              onChange={(e) => setSearchQuery(e.target.value)}\r\n              className=\"pl-10 pr-4 py-3 text-base\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {/* Global Audio Controls - Only show when audio is playing */}\r\n        {(playingId || pausedId) && (\r\n          <div className=\"mb-8\">\r\n            <Card className=\"p-4 bg-gradient-to-r from-monastery-gold/10 to-mountain-blue/10\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div className=\"flex items-center space-x-4\">\r\n                  <div className=\"w-12 h-12 bg-monastery-gold/20 rounded-full flex items-center justify-center\">\r\n                    <Volume2 className=\"w-6 h-6 text-monastery-gold\" />\r\n                  </div>\r\n                  <div>\r\n                    <h3 className=\"font-semibold text-foreground\">\r\n                      {audioGuides.find(g => g.id === (playingId || pausedId))?.title}\r\n                    </h3>\r\n                    <p className=\"text-sm text-muted-foreground\">\r\n                      {audioGuides.find(g => g.id === (playingId || pausedId))?.monastery}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div className=\"flex items-center space-x-4\">\r\n                  {/* Volume Controls */}\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <Button\r\n                      variant=\"ghost\"\r\n                      size=\"sm\"\r\n                      onClick={handleMuteToggle}\r\n                    >\r\n                      {isMuted ? <VolumeX className=\"w-4 h-4\" /> : <Volume1 className=\"w-4 h-4\" />}\r\n                    </Button>\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"0\"\r\n                      max=\"1\"\r\n                      step=\"0.1\"\r\n                      value={isMuted ? 0 : volume}\r\n                      onChange={(e) => handleVolumeChange(parseFloat(e.target.value))}\r\n                      className=\"w-20 h-2 bg-muted rounded-lg appearance-none cursor-pointer\"\r\n                    />\r\n                  </div>\r\n                  \r\n                  {/* Progress Display */}\r\n                  <div className=\"text-sm text-muted-foreground\">\r\n                    {formatTime(currentTime)} / {formatTime(duration || audioDurations[playingId || pausedId || ''] || 0)}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Card>\r\n          </div>\r\n        )}\r\n\r\n        {/* Search Results Info */}\r\n        {searchQuery && (\r\n          <div className=\"mb-4\">\r\n            <p className=\"text-sm text-muted-foreground\">\r\n              {filteredGuides.length} audio guide{filteredGuides.length !== 1 ? 's' : ''} found for \"{searchQuery}\"\r\n            </p>\r\n          </div>\r\n        )}\r\n\r\n        {/* Audio Guides Grid */}\r\n        {filteredGuides.length === 0 ? (\r\n          <div className=\"text-center py-12\">\r\n            <Search className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\r\n            <h3 className=\"text-lg font-semibold text-foreground mb-2\">No audio guides found</h3>\r\n            <p className=\"text-muted-foreground\">\r\n              No results found for \"{searchQuery}\". Try adjusting your search terms.\r\n            </p>\r\n          </div>\r\n        ) : (\r\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-2 gap-4 sm:gap-6\">\r\n            {filteredGuides.map((guide) => (\r\n            <Card key={guide.id} className=\"overflow-hidden hover:shadow-peaceful transition-all duration-300\">\r\n              <div className=\"p-4 sm:p-6\">\r\n                <div className=\"flex justify-between items-start mb-4 gap-2\">\r\n                  <div className=\"flex-1 min-w-0\">\r\n                    <h3 className=\"text-base sm:text-lg font-bold text-foreground mb-2 truncate\">{guide.title}</h3>\r\n                    <div className=\"flex items-center text-muted-foreground mb-2 text-sm\">\r\n                      <MapPin className=\"w-4 h-4 mr-2 flex-shrink-0\" />\r\n                      <span className=\"truncate\">{guide.monastery}</span>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"flex flex-col gap-1 sm:gap-2 flex-shrink-0\">\r\n                    <Badge className={getTypeColor(guide.type)}>\r\n                      {capitalizeFirst(guide.type)}\r\n                    </Badge>\r\n                    {guide.premium && (\r\n                      <Badge variant=\"secondary\" className=\"text-xs\">\r\n                        Premium\r\n                      </Badge>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n\r\n                <p className=\"text-muted-foreground mb-4 text-sm\">{guide.description}</p>\r\n\r\n                <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-2 sm:gap-4 mb-4 text-sm\">\r\n                  <div className=\"flex items-center text-muted-foreground\">\r\n                    <Clock className=\"w-4 h-4 mr-1\" />\r\n                    {audioDurations[guide.id] ? formatDuration(audioDurations[guide.id]) : (\r\n                      <span className=\"flex items-center\">\r\n                        <Loader2 className=\"w-3 h-3 mr-1 animate-spin\" />\r\n                        Loading...\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"text-muted-foreground\">\r\n                    {guide.language}\r\n                  </div>\r\n                  <div className=\"flex items-center\">\r\n                    {guide.offline && (\r\n                      <Badge variant=\"outline\" className=\"text-xs\">\r\n                        Offline Ready\r\n                      </Badge>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Audio Player Controls */}\r\n                <div className=\"flex items-center gap-3\">\r\n                  <Button\r\n                    variant=\"monastery\"\r\n                    size=\"sm\"\r\n                    onClick={() => handlePlayPause(guide.id, guide.audioFile)}\r\n                    className=\"flex-1\"\r\n                  >\r\n                    {playingId === guide.id ? (\r\n                      <>\r\n                        <Pause className=\"w-4 h-4 mr-2\" />\r\n                        Pause\r\n                      </>\r\n                    ) : pausedId === guide.id ? (\r\n                      <>\r\n                        <Play className=\"w-4 h-4 mr-2\" />\r\n                        Resume\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <Play className=\"w-4 h-4 mr-2\" />\r\n                        {guide.premium ? \"Preview\" : \"Play\"}\r\n                      </>\r\n                    )}\r\n                  </Button>\r\n                  \r\n                  <Button \r\n                    variant=\"outline\" \r\n                    size=\"sm\"\r\n                    onClick={() => handleDownload(guide)}\r\n                    title={`Download ${guide.title}`}\r\n                    disabled={downloadingId === guide.id}\r\n                  >\r\n                    {downloadingId === guide.id ? (\r\n                      <Loader2 className=\"w-4 h-4 animate-spin\" />\r\n                    ) : (\r\n                      <Download className=\"w-4 h-4\" />\r\n                    )}\r\n                  </Button>\r\n                </div>\r\n\r\n                {/* Progress Bar (when playing or paused) */}\r\n                {(playingId === guide.id || pausedId === guide.id) && (\r\n                  <div className=\"mt-4\">\r\n                    <div className=\"w-full bg-muted rounded-full h-2\">\r\n                      <div \r\n                        className=\"bg-monastery-gold h-2 rounded-full transition-all duration-300\"\r\n                        style={{ width: `${progressPercentage}%` }}\r\n                      ></div>\r\n                    </div>\r\n                    <div className=\"flex justify-between text-xs text-muted-foreground mt-1\">\r\n                      <span>{formatTime(currentTime)}</span>\r\n                      <span>{formatTime(duration || audioDurations[guide.id] || parseDuration(guide.duration))}</span>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </Card>\r\n            ))}\r\n          </div>\r\n        )}\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AudioGuides;"],
  "mappings": "gRAAA,IAAAA,EAA4C,U,+iBAsctC,IAAAC,EAAA,SAlaAC,EAA4B,CAChC,CACE,GAAI,IACJ,MAAO,mBACP,UAAW,mBACX,SAAU,SACV,SAAU,UACV,SAAU,mBACV,YAAa,gKACb,KAAM,OACN,QAAS,GACT,QAAS,GACT,UAAWC,CACb,EACA,CACE,GAAI,IACJ,MAAO,mBACP,UAAW,mBACX,SAAU,SACV,SAAU,UACV,SAAU,aACV,YAAa,gJACb,KAAM,OACN,QAAS,GACT,QAAS,GACT,UAAWC,CACb,EACA,CACE,GAAI,IACJ,MAAO,sBACP,UAAW,sBACX,SAAU,SACV,SAAU,UACV,SAAU,qBACV,YAAa,iJACb,KAAM,OACN,QAAS,GACT,QAAS,GACT,UAAWC,CACb,EACA,CACE,GAAI,IACJ,MAAO,wBACP,UAAW,wBACX,SAAU,SACV,SAAU,UACV,SAAU,kBACV,YAAa,uIACb,KAAM,OACN,QAAS,GACT,QAAS,GACT,UAAWC,EACb,EACA,CACE,GAAI,IACJ,MAAO,kBACP,UAAW,kBACX,SAAU,SACV,SAAU,UACV,SAAU,mBACV,YAAa,oIACb,KAAM,OACN,QAAS,GACT,QAAS,GACT,UAAWC,EACb,EACA,CACE,GAAI,IACJ,MAAO,mBACP,UAAW,mBACX,SAAU,SACV,SAAU,UACV,SAAU,aACV,YAAa,uIACb,KAAM,OACN,QAAS,GACT,QAAS,GACT,UAAWC,EACb,EACA,CACE,GAAI,IACJ,MAAO,4BACP,UAAW,4BACX,SAAU,SACV,SAAU,UACV,SAAU,kBACV,YAAa,mJACb,KAAM,OACN,QAAS,GACT,QAAS,GACT,UAAWC,EACb,EACA,CACE,GAAI,IACJ,MAAO,oBACP,UAAW,oBACX,SAAU,SACV,SAAU,UACV,SAAU,aACV,YAAa,0HACb,KAAM,OACN,QAAS,GACT,QAAS,GACT,UAAWC,EACb,EACA,CACE,GAAI,IACJ,MAAO,mBACP,UAAW,mBACX,SAAU,SACV,SAAU,UACV,SAAU,cACV,YAAa,8IACb,KAAM,OACN,QAAS,GACT,QAAS,GACT,UAAWC,EACb,EACA,CACE,GAAI,KACJ,MAAO,wBACP,UAAW,wBACX,SAAU,SACV,SAAU,UACV,SAAU,aACV,YAAa,gJACb,KAAM,OACN,QAAS,GACT,QAAS,GACT,UAAWC,EACb,CACF,EAEaC,GAAc,IAAM,CAzKjC,IAAAC,EAAAC,EA0KE,GAAM,CAACC,EAAaC,CAAc,KAAI,YAAS,EAAE,EAC3C,CAACC,EAAWC,CAAY,KAAI,YAAwB,IAAI,EACxD,CAACC,EAAaC,CAAc,KAAI,YAAS,CAAC,EAC1C,CAACC,EAAUC,EAAW,KAAI,YAAS,CAAC,EACpC,CAACC,EAAgBC,EAAiB,KAAI,YAAiC,CAAC,CAAC,EACzE,CAACC,EAAeC,CAAgB,KAAI,YAAwB,IAAI,EAChE,CAACC,EAAUC,CAAW,KAAI,YAAwB,IAAI,EACtD,CAACC,EAAQC,EAAS,KAAI,YAAS,CAAC,EAChC,CAACC,EAASC,CAAU,KAAI,YAAS,EAAK,EACtCC,KAAW,UAAgC,IAAI,EAC/C,CAACC,EAAY,EAAIC,EAAgB,EACjCC,EAAiBF,GAAa,IAAI,WAAW,KAGnD,aAAU,IAAM,CACVE,GACFpB,EAAeoB,CAAc,CAEjC,EAAG,CAACA,CAAc,CAAC,EAEnB,IAAMC,EAAiBpC,EAAY,OAAOqC,GAClBvB,IAAgB,IACpCuB,EAAM,MAAM,YAAY,EAAE,SAASvB,EAAY,YAAY,CAAC,GAC5DuB,EAAM,UAAU,YAAY,EAAE,SAASvB,EAAY,YAAY,CAAC,GAChEuB,EAAM,YAAY,YAAY,EAAE,SAASvB,EAAY,YAAY,CAAC,GAClEuB,EAAM,SAAS,YAAY,EAAE,SAASvB,EAAY,YAAY,CAAC,GAC/DuB,EAAM,SAAS,YAAY,EAAE,SAASvB,EAAY,YAAY,CAAC,GAC/DuB,EAAM,KAAK,YAAY,EAAE,SAASvB,EAAY,YAAY,CAAC,CAE9D,EAEKwB,GAAgBC,GAAiB,CACrC,OAAQA,EAAM,CACZ,IAAK,OAAQ,MAAO,kFACpB,IAAK,UAAW,MAAO,yCACvB,IAAK,aAAc,MAAO,6BAC1B,IAAK,WAAY,MAAO,2BACxB,QAAS,MAAO,gCAClB,CACF,EAEMC,GAAmBC,GAChBA,EAAI,OAAO,CAAC,EAAE,YAAY,EAAIA,EAAI,MAAM,CAAC,EAK5CC,EAAkB,CAACC,EAAiBC,IAAsB,CAC9D,GAAI5B,IAAc2B,EAEZX,EAAS,SACXA,EAAS,QAAQ,MAAM,EAEzBf,EAAa,IAAI,EACjBU,EAAYgB,CAAO,UACVjB,IAAaiB,EAElBX,EAAS,UACXA,EAAS,QAAQ,KAAK,EAAE,MAAMa,GAAS,CACrC,QAAQ,MAAM,wBAAyBA,CAAK,EAC5C5B,EAAa,IAAI,EACjBU,EAAY,IAAI,CAClB,CAAC,EACDV,EAAa0B,CAAO,EACpBhB,EAAY,IAAI,OAEb,CAEDK,EAAS,UACXA,EAAS,QAAQ,MAAM,EACvBA,EAAS,QAAQ,YAAc,GAIjC,IAAMc,EAAQ,IAAI,MAAMF,CAAS,EACjCZ,EAAS,QAAUc,EAEnBA,EAAM,iBAAiB,iBAAkB,IAAM,CAC7CzB,GAAYyB,EAAM,QAAQ,CAC5B,CAAC,EAEDA,EAAM,iBAAiB,aAAc,IAAM,CACzC3B,EAAe2B,EAAM,WAAW,CAClC,CAAC,EAEDA,EAAM,iBAAiB,QAAS,IAAM,CACpC7B,EAAa,IAAI,EACjBU,EAAY,IAAI,EAChBR,EAAe,CAAC,CAClB,CAAC,EAED2B,EAAM,iBAAiB,QAAUC,GAAM,CACrC,QAAQ,MAAM,wBAAyBA,CAAC,EACxC9B,EAAa,IAAI,EACjBU,EAAY,IAAI,CAClB,CAAC,EAEDmB,EAAM,KAAK,EAAE,MAAMD,GAAS,CAC1B,QAAQ,MAAM,uBAAwBA,CAAK,EAC3C5B,EAAa,IAAI,EACjBU,EAAY,IAAI,CAClB,CAAC,EACDV,EAAa0B,CAAO,EACpBhB,EAAY,IAAI,CAClB,CACF,EAEMqB,EAAcC,GAAiB,CACnC,IAAMC,EAAU,KAAK,MAAMD,EAAO,EAAE,EAC9BE,EAAU,KAAK,MAAMF,EAAO,EAAE,EACpC,MAAO,GAAGC,CAAO,IAAIC,EAAQ,SAAS,EAAE,SAAS,EAAG,GAAG,CAAC,EAC1D,EAEMC,GAAqBhC,EAAW,EAAKF,EAAcE,EAAY,IAAM,KAG3E,aAAU,IAAM,EACa,SAAY,CACrC,IAAMiC,EAAoC,CAAC,EAGrCC,EAAetD,EAAY,IAAI,MAAOqC,GAAU,CACpD,GAAI,CACF,IAAMS,EAAQ,IAAI,MAAMT,EAAM,SAAS,EAEvC,OAAO,IAAI,QAAyCkB,GAAY,CAC9D,IAAMC,EAAU,WAAW,IAAM,CAC/B,QAAQ,KAAK,gCAAgCnB,EAAM,KAAK,kBAAkB,EAC1EkB,EAAQ,CAAE,GAAIlB,EAAM,GAAI,SAAUoB,EAAcpB,EAAM,QAAQ,CAAE,CAAC,CACnE,EAAG,GAAI,EAEPS,EAAM,iBAAiB,iBAAkB,IAAM,CAC7C,aAAaU,CAAO,EACpBD,EAAQ,CAAE,GAAIlB,EAAM,GAAI,SAAUS,EAAM,QAAS,CAAC,CACpD,CAAC,EAEDA,EAAM,iBAAiB,QAAUC,IAAM,CACrC,aAAaS,CAAO,EACpB,QAAQ,KAAK,8BAA8BnB,EAAM,KAAK,IAAKU,EAAC,EAC5DQ,EAAQ,CAAE,GAAIlB,EAAM,GAAI,SAAUoB,EAAcpB,EAAM,QAAQ,CAAE,CAAC,CACnE,CAAC,EAGDS,EAAM,KAAK,CACb,CAAC,CACH,OAASD,EAAO,CACd,eAAQ,KAAK,+BAA+BR,EAAM,KAAK,IAAKQ,CAAK,EAC1D,CAAE,GAAIR,EAAM,GAAI,SAAUoB,EAAcpB,EAAM,QAAQ,CAAE,CACjE,CACF,CAAC,EAED,GAAI,EACc,MAAM,QAAQ,IAAIiB,CAAY,GACtC,QAAQ,CAAC,CAAE,GAAAI,EAAI,SAAAtC,CAAS,IAAM,CACpCiC,EAAUK,CAAE,EAAItC,CAClB,CAAC,EACDG,GAAkB8B,CAAS,CAC7B,OAASR,EAAO,CACd,QAAQ,MAAM,iCAAkCA,CAAK,CACvD,CACF,GAEmB,CACrB,EAAG,CAAC,CAAC,EAGL,IAAMY,EAAiBE,GAAgC,CACrD,IAAMC,EAAQD,EAAY,MAAM,aAAa,EAC7C,OAAOC,EAAQ,SAASA,EAAM,CAAC,CAAC,EAAI,GAAK,CAC3C,EAGMC,GAAkBV,GAA4B,CAClD,IAAMD,EAAU,KAAK,MAAMC,EAAU,EAAE,EACjCW,EAAmB,KAAK,MAAMX,EAAU,EAAE,EAChD,OAAID,EAAU,EACLY,EAAmB,EAAI,GAAGZ,CAAO,KAAKY,CAAgB,IAAM,GAAGZ,CAAO,OAExE,GAAGY,CAAgB,MAC5B,EAGMC,GAAiB,MAAO1B,GAAsB,CAClDZ,EAAiBY,EAAM,EAAE,EAEzB,GAAI,CAEF,IAAM2B,EAAW,MAAM,MAAM3B,EAAM,SAAS,EAC5C,GAAI,CAAC2B,EAAS,GACZ,MAAM,IAAI,MAAM,4BAA4B,EAI9C,IAAMC,EAAO,MAAMD,EAAS,KAAK,EAG3BE,EAAM,OAAO,IAAI,gBAAgBD,CAAI,EAGrCE,EAAO,SAAS,cAAc,GAAG,EACvCA,EAAK,KAAOD,EAGZ,IAAME,EAAW,GAAG/B,EAAM,UAAU,QAAQ,gBAAiB,GAAG,CAAC,IAAIA,EAAM,MAAM,QAAQ,gBAAiB,GAAG,CAAC,OAC9G8B,EAAK,SAAWC,EAGhB,SAAS,KAAK,YAAYD,CAAI,EAC9BA,EAAK,MAAM,EACX,SAAS,KAAK,YAAYA,CAAI,EAG9B,OAAO,IAAI,gBAAgBD,CAAG,CAEhC,OAASrB,EAAO,CACd,QAAQ,MAAM,gCAAiCA,CAAK,EAEpD,GAAI,CACF,IAAMsB,EAAO,SAAS,cAAc,GAAG,EACvCA,EAAK,KAAO9B,EAAM,UAClB8B,EAAK,SAAW,GAAG9B,EAAM,UAAU,QAAQ,gBAAiB,GAAG,CAAC,IAAIA,EAAM,MAAM,QAAQ,gBAAiB,GAAG,CAAC,OAC7G,SAAS,KAAK,YAAY8B,CAAI,EAC9BA,EAAK,MAAM,EACX,SAAS,KAAK,YAAYA,CAAI,CAChC,OAASE,EAAe,CACtB,QAAQ,MAAM,4BAA6BA,CAAa,EAExD,OAAO,KAAKhC,EAAM,UAAW,QAAQ,CACvC,CACF,QAAE,CACAZ,EAAiB,IAAI,CACvB,CACF,EAGM6C,GAAsBC,GAAsB,CAChD1C,GAAU0C,CAAS,EACfvC,EAAS,UACXA,EAAS,QAAQ,OAASuC,EAE9B,EAEMC,GAAmB,IAAM,CACzBxC,EAAS,UACPF,GACFE,EAAS,QAAQ,OAASJ,EAC1BG,EAAW,EAAK,IAEhBC,EAAS,QAAQ,OAAS,EAC1BD,EAAW,EAAI,GAGrB,EAGA,sBAAU,IAAM,CACd,IAAM0C,EAAkB1B,GAAqB,CAC3C,GAAIA,EAAE,OAAS,UAAY/B,GAAaU,GAAW,CACjDqB,EAAE,eAAe,EACjB,IAAM2B,EAAe1E,EAAY,KAAK2E,GAAKA,EAAE,MAAQ3D,GAAaU,EAAS,EACvEgD,GACFhC,EAAgBgC,EAAa,GAAIA,EAAa,SAAS,CAE3D,CACF,EAEA,cAAO,iBAAiB,UAAWD,CAAc,EAC1C,IAAM,OAAO,oBAAoB,UAAWA,CAAc,CACnE,EAAG,CAACzD,EAAWU,CAAQ,CAAC,KAGxB,aAAU,IACD,IAAM,CACPM,EAAS,UACXA,EAAS,QAAQ,MAAM,EACvBA,EAAS,QAAU,MAErBf,EAAa,IAAI,EACjBU,EAAY,IAAI,CAClB,EACC,CAAC,CAAC,KAGH,QAAC,OAAI,UAAU,6BACb,oBAACiD,EAAA,EAAW,KAGZ,OAAC,WAAQ,UAAU,mHACjB,mBAAC,OAAI,UAAU,yBACb,oBAAC,OAAI,UAAU,mBACb,oBAAC,MAAG,UAAU,sDACZ,mBAAC,QAAK,UAAU,sDAAsD,8BAAkB,EAC1F,KACA,OAAC,KAAE,UAAU,kDAAkD,6LAG/D,GACF,EACF,EACF,KAEA,QAAC,OAAI,UAAU,sCAEb,oBAAC,OAAI,UAAU,OACb,oBAAC,OAAI,UAAU,WACb,oBAACC,EAAA,CAAO,UAAU,mFAAmF,KACrG,OAACC,EAAA,CACC,KAAK,OACL,YAAY,mEACZ,MAAOhE,EACP,SAAWiC,GAAMhC,EAAegC,EAAE,OAAO,KAAK,EAC9C,UAAU,4BACZ,GACF,EACF,GAGE/B,GAAaU,OACb,OAAC,OAAI,UAAU,OACb,mBAACqD,EAAA,CAAK,UAAU,kEACd,oBAAC,OAAI,UAAU,oCACb,qBAAC,OAAI,UAAU,8BACb,oBAAC,OAAI,UAAU,+EACb,mBAACC,EAAA,CAAQ,UAAU,8BAA8B,EACnD,KACA,QAAC,OACC,oBAAC,MAAG,UAAU,gCACX,UAAApE,EAAAZ,EAAY,KAAK2E,GAAKA,EAAE,MAAQ3D,GAAaU,EAAS,IAAtD,YAAAd,EAAyD,MAC5D,KACA,OAAC,KAAE,UAAU,gCACV,UAAAC,EAAAb,EAAY,KAAK2E,GAAKA,EAAE,MAAQ3D,GAAaU,EAAS,IAAtD,YAAAb,EAAyD,UAC5D,GACF,GACF,KAEA,QAAC,OAAI,UAAU,8BAEb,qBAAC,OAAI,UAAU,8BACb,oBAACoE,EAAA,CACC,QAAQ,QACR,KAAK,KACL,QAAST,GAER,SAAA1C,KAAU,OAACoD,EAAA,CAAQ,UAAU,UAAU,KAAK,OAACC,EAAA,CAAQ,UAAU,UAAU,EAC5E,KACA,OAAC,SACC,KAAK,QACL,IAAI,IACJ,IAAI,IACJ,KAAK,MACL,MAAOrD,EAAU,EAAIF,EACrB,SAAWmB,GAAMuB,GAAmB,WAAWvB,EAAE,OAAO,KAAK,CAAC,EAC9D,UAAU,8DACZ,GACF,KAGA,QAAC,OAAI,UAAU,gCACZ,UAAAC,EAAW9B,CAAW,EAAE,MAAI8B,EAAW5B,GAAYE,EAAeN,GAAaU,GAAY,EAAE,GAAK,CAAC,GACtG,GACF,GACF,EACF,EACF,EAIDZ,MACC,OAAC,OAAI,UAAU,OACb,oBAAC,KAAE,UAAU,gCACV,UAAAsB,EAAe,OAAO,eAAaA,EAAe,SAAW,EAAI,IAAM,GAAG,eAAatB,EAAY,KACtG,EACF,EAIDsB,EAAe,SAAW,KACzB,QAAC,OAAI,UAAU,oBACb,oBAACyC,EAAA,CAAO,UAAU,+CAA+C,KACjE,OAAC,MAAG,UAAU,6CAA6C,iCAAqB,KAChF,QAAC,KAAE,UAAU,wBAAwB,mCACZ/D,EAAY,uCACrC,GACF,KAEA,OAAC,OAAI,UAAU,gEACZ,SAAAsB,EAAe,IAAKC,MACrB,OAAC0C,EAAA,CAAoB,UAAU,oEAC7B,oBAAC,OAAI,UAAU,aACb,qBAAC,OAAI,UAAU,8CACb,qBAAC,OAAI,UAAU,iBACb,oBAAC,MAAG,UAAU,+DAAgE,SAAA1C,EAAM,MAAM,KAC1F,QAAC,OAAI,UAAU,uDACb,oBAAC+C,EAAA,CAAO,UAAU,6BAA6B,KAC/C,OAAC,QAAK,UAAU,WAAY,SAAA/C,EAAM,UAAU,GAC9C,GACF,KACA,QAAC,OAAI,UAAU,6CACb,oBAACgD,EAAA,CAAM,UAAW/C,GAAaD,EAAM,IAAI,EACtC,SAAAG,GAAgBH,EAAM,IAAI,EAC7B,EACCA,EAAM,YACL,OAACgD,EAAA,CAAM,QAAQ,YAAY,UAAU,UAAU,mBAE/C,GAEJ,GACF,KAEA,OAAC,KAAE,UAAU,qCAAsC,SAAAhD,EAAM,YAAY,KAErE,QAAC,OAAI,UAAU,8DACb,qBAAC,OAAI,UAAU,0CACb,oBAACiD,EAAA,CAAM,UAAU,eAAe,EAC/BhE,EAAee,EAAM,EAAE,EAAIwB,GAAevC,EAAee,EAAM,EAAE,CAAC,KACjE,QAAC,QAAK,UAAU,oBACd,oBAACkD,EAAA,CAAQ,UAAU,4BAA4B,EAAE,cAEnD,GAEJ,KACA,OAAC,OAAI,UAAU,wBACZ,SAAAlD,EAAM,SACT,KACA,OAAC,OAAI,UAAU,oBACZ,SAAAA,EAAM,YACL,OAACgD,EAAA,CAAM,QAAQ,UAAU,UAAU,UAAU,yBAE7C,EAEJ,GACF,KAGA,QAAC,OAAI,UAAU,0BACb,oBAACJ,EAAA,CACC,QAAQ,YACR,KAAK,KACL,QAAS,IAAMvC,EAAgBL,EAAM,GAAIA,EAAM,SAAS,EACxD,UAAU,SAET,SAAArB,IAAcqB,EAAM,MACnB,oBACE,oBAACmD,EAAA,CAAM,UAAU,eAAe,EAAE,SAEpC,EACE9D,IAAaW,EAAM,MACrB,oBACE,oBAACoD,EAAA,CAAK,UAAU,eAAe,EAAE,UAEnC,KAEA,oBACE,oBAACA,EAAA,CAAK,UAAU,eAAe,EAC9BpD,EAAM,QAAU,UAAY,QAC/B,EAEJ,KAEA,OAAC4C,EAAA,CACC,QAAQ,UACR,KAAK,KACL,QAAS,IAAMlB,GAAe1B,CAAK,EACnC,MAAO,YAAYA,EAAM,KAAK,GAC9B,SAAUb,IAAkBa,EAAM,GAEjC,SAAAb,IAAkBa,EAAM,MACvB,OAACkD,EAAA,CAAQ,UAAU,uBAAuB,KAE1C,OAACG,EAAA,CAAS,UAAU,UAAU,EAElC,GACF,GAGE1E,IAAcqB,EAAM,IAAMX,IAAaW,EAAM,QAC7C,QAAC,OAAI,UAAU,OACb,oBAAC,OAAI,UAAU,mCACb,mBAAC,OACC,UAAU,iEACV,MAAO,CAAE,MAAO,GAAGe,EAAkB,GAAI,EAC1C,EACH,KACA,QAAC,OAAI,UAAU,0DACb,oBAAC,QAAM,SAAAJ,EAAW9B,CAAW,EAAE,KAC/B,OAAC,QAAM,SAAA8B,EAAW5B,GAAYE,EAAee,EAAM,EAAE,GAAKoB,EAAcpB,EAAM,QAAQ,CAAC,EAAE,GAC3F,GACF,GAEJ,GAtGSA,EAAM,EAuGjB,CACC,EACH,GAGJ,GACF,CAEJ,EAEOsD,GAAQhF",
  "names": ["import_react", "import_jsx_runtime", "audioGuides", "Rumtek_monastery_default", "Enchey_Monastery_default", "Tashiding_Monastery_default", "Pemayangtse_Monastery_default", "Dubdi_Monastery_default", "Kartok_Monastery_default", "Lingdum_Ranka_Monastery_default", "Phodong_Monastery_default", "Ralang_Monastery_default", "Do_Drul_Chorten_Stupa_default", "AudioGuides", "_a", "_b", "searchQuery", "setSearchQuery", "playingId", "setPlayingId", "currentTime", "setCurrentTime", "duration", "setDuration", "audioDurations", "setAudioDurations", "downloadingId", "setDownloadingId", "pausedId", "setPausedId", "volume", "setVolume", "isMuted", "setIsMuted", "audioRef", "searchParams", "useSearchParams", "monasteryParam", "filteredGuides", "guide", "getTypeColor", "type", "capitalizeFirst", "str", "handlePlayPause", "guideId", "audioFile", "error", "audio", "e", "formatTime", "time", "minutes", "seconds", "progressPercentage", "durations", "loadPromises", "resolve", "timeout", "parseDuration", "id", "durationStr", "match", "formatDuration", "remainingSeconds", "handleDownload", "response", "blob", "url", "link", "fileName", "fallbackError", "handleVolumeChange", "newVolume", "handleMuteToggle", "handleKeyPress", "currentGuide", "g", "Navigation", "Search", "Input", "Card", "Volume2", "Button", "VolumeX", "Volume1", "MapPin", "Badge", "Clock", "LoaderCircle", "Pause", "Play", "Download", "AudioGuides_default"]
}
